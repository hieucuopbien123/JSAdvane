// C√°c t√≠nh nƒÉng c√†ng hi·ªán ƒë·∫°i c√≥ th·ªÉ tr√¨nh duy·ªát c≈© k ch·∫°y v√† c·∫ßn ch√∫ √Ω polyfill
// N·∫øu b√°o is not a function th√¨ c√≥ th·ªÉ l√† tr√¨nh duy·ªát c≈© ch∆∞a update polyfill

// *ES2015
// Arrow function
// Class v·ªõi constructor v√† h√†m nh∆∞ bth
// let v√† const
// tepmlate string `${}`
// Promises

// *ES2016
// Array.prototype.includes()
// 2**2 = 4

// *ES2017
// Object.values/Object.entries
// Trailing commas in parameter lists: C·∫£ hai (a) => {} v√† (a,) => {} ƒë·ªÅu l√† ƒë·ªãnh nghƒ©a h√†m h·ª£p l·ªá
// async/await
// padStart()/padEnd()
/* Object.getOwnPropertyDescriptors
Enumerable properties object l√† c√°c thu·ªôc t√≠nh c·ªßa 1 object m√† s·∫Ω hi·ªÉn th·ªã n·∫øu ta mu·ªën n√≥ hi·ªán ra b·∫±ng v√≤ng for...in ho·∫∑c Object.keys, VD writable, enumerable...
Object.getOwnPropertyDescriptor c·ªßa ES2017 gi√∫p l·∫•y ra to√†n b·ªô Enumerable properties object c·ªßa 1 bi·∫øn
*/

// *ES2018
// finally trong try catch

// Ph√¢n bi·ªát rest param v√† spread operator
// Rest param d√πng v·ªõi m·∫£ng, object, function params. VD v·ªõi m·∫£ng:
const myArray = ["anonystick", "medium", "reddit"]
const [firstName, ...restElements] = myArray;
console.log(firstName); // anonystick
console.log(restElements); // ["medium", "reddit"]

// Spread operator ch·ªâ d√πng v·ªõi m·∫£ng v√† object
const withoutAnonystick = ["medium", "Reddit"];
const wholeBlog= ["Anonystick", ...withoutAnonystick]; //["Anonystick", "medium", "Reddit"]

// Spread operator y h·ªát thay th·∫ø ho√†n to√†n API c≈© l√† Object.assign();
// Object b√™n ph·∫£i s·∫Ω overwrite object b√™n tr√°i
var o1 = {a: 1, b: 2};
var o2 = {b: 3};
console.log(Object.assign({}, {a: 0}, o1, o2)); // {a: 1, b: 3}
console.log({a: 0, ...o1, ...o2}); // {a: 1, b: 3}

// for await...of => loop qua 1 async/sync iterable object. T·ª©c n√≥ duy·ªát b·∫•t ƒë·ªìng b·ªô c·∫ßn c√≥ await ƒë·ªÉ l√†m n√≥ ƒë√∫ng th·ª© t·ª± => t·ª©c d√πng khi c·∫ßn duy·ªát 1 async iterable object 1 c√°ch ƒë·ªìng b·ªô => √©o bh d√πng lu√¥n ·∫•y
async function* foo() { // 1 async iterable object 
  yield 1;
  yield 2;
  yield 3;
}
(async function() {
  for await (const num of foo()) {
    console.log(num); // 1 2
    if(num == 2){
      break;
    }
  }
})();


// *ES2019
// Array.prototype.flat()
// H√†m flat nh·∫≠n number x√°c ƒë·ªãnh depth mu·ªën flat, truy·ªÅn Infinity ƒë·ªÉ flat th√†nh 1 m·∫£ng ƒë∆°n
const arr4 = [1, 2, [3, 4, [5, 6, [7, 8, [9, 10]]]]];
console.log(arr4.flat(Infinity)) // [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

// Array.prototype.flatMap()
// flatMap s·∫Ω g·ªçi x.map().flat() li√™n ti·∫øp nhau nh∆∞ng d√πng h√†m n√†y s·∫Ω ƒëem l·∫°i performance t·ªët h∆°n
// H√†m n√†y r·∫•t ·∫£o. N·∫øu g·ªçi m√† k d√πng, ·ªü ƒë√¢y b·ªè console.log s·∫Ω g√¢y l·ªói
console.log([[2], [4], [6], [8, 10]].flatMap(val => [val[0]/2])); // [ 1, 2, 3, 4 ]

// C√∫ ph√°p JS r·∫•t ·∫£o
const y = [10];
console.log(y/2); // 5 => n·∫øu m·∫£ng ch·ªâ c√≥ 1 ph·∫ßn t·ª≠, m√† ta d√πng nh∆∞ n√†y n√≥ t·ª± convert sang s·ªë bth ƒë·∫•y. 
// => Do ƒë√≥ c√∫ ph√°p b√™n tr√™n khi vi√™t nh∆∞ d∆∞·ªõi th·ª±c t·∫ø n√≥ g·ªçi map xong flat ch·∫£ l√†m g√¨ c·∫£ v√¨ n√≥ convert c√°c element sang s·ªë t·ª´ tr∆∞·ªõc khi g·ªçi flat r·ªìi
console.log([[2], [4], [6], [8]].flatMap(val => val/2)); // [ 1, 2, 3, 4 ]

// Object.fromEntries()
// String.prototype.trimStart()
// String.prototype.trimEnd()
console.log(Symbol('desc').description); // Symbol.prototype.description

// optional catch binding => catch c√≥ th·ªÉ c√≥ param ho·∫∑c kh√¥ng
try{} catch{} 
try{} catch(e){} 


// *ES2020
// String.prototype.matchAll
// BigInt
// Optional Chaining Operator(?.)

// Dynamic import
// Trong nodejs, nh·ªù CommonJS m√† ta d√πng require() ƒë∆∞·ª£c, r·ªìi s·∫Ω convert h·∫øt sang import export th√¥i
// Trong browser d√πng ES6, ta c√≥ th·ªÉ nh√∫ng file js v√†o v·ªõi type="module" th√¨ file js ƒë√≥ dung ƒë∆∞·ª£c import export tr·ª±c ti·∫øp bth. Khi ƒë√≥, user t·∫£i l·∫°i trang s·∫Ω ph·∫£i t·∫£i l·∫°i file js. VD 10 user v√†o m√† ch·ªâ 2 user s·ª≠ d·ª•ng t√≠nh nƒÉng trong file js ƒë√≥ th√¨ vi·ªác t·∫£i file js m·ªçi l·∫ßn s·∫Ω ph√≠ c√¥ng
// C√≤n async v√† defer klq, defer l√† parse html xong m·ªõi load code js
// Dynamic import ra ƒë·ªùi: khi dynamic import v√†o module trong browser, ch·ªâ khi n√†o th·ª±c s·ª± s·ª≠ d·ª•ng m·ªõi load file js ƒë√≥ => Thg d√πng ·ªü frontend khi c√≥ t√≠nh nƒÉng √≠t ai s·ª≠ d·ª•ng, ho·∫∑c c√≥ t√≠nh nƒÉng export ra file excel ch·∫≥ng h·∫°n th√¨ c≈©ng n√™n d√πng dynamic import

// Promise.allSettled => Promise.all s·∫Ω reject (g·ªçi catch) n·∫øu 1 trong c√°c h√†m reject, c√≤n Promise.allSettled ƒë·∫£m b·∫£o m·ªçi h√†m ƒë·ªÅu ch·∫°y ƒë∆∞·ª£c h·∫øt

// Promise.finally 
let isLoading = true;
new Promise((resolve) => {
  resolve("OK:: Call from promise");
}).then(function(mess) { console.log(mess) })
  .catch(function(error) { console.log(error); })
  .finally(function() { isLoading = false; console.log("Call from finally") });

// Nullish coalescing Operator
let anonystick = {
  profile: {
      website: 'anonystick.com',
      type: 'blog javascript',
      age: 0,
      release: ''
  }
}
// VD mu·ªën check null th√¨ hi·ªÉn th·ªã 1 gi√° tr·ªã kh√°c. Nh∆∞ng d√πng logic bth s·∫Ω lu√¥n convert "" v√† 0 l√† false, ph·∫£i d√πng null coalescing ch·ªâ ch·∫°y v·∫ø ph·∫£i n·∫øu ƒë√∫ng chu·∫©n l√† null
console.log(anonystick.profile.age || 18) // 18
console.log(anonystick.profile.age ?? 18) // 0
console.log(anonystick.profile.release ? '17/07/2014' : 18) // 18
console.log(anonystick.profile.release ?? 18) // ''

// *ES2021
// String.prototype.replaceAll()
// Promise.any()
// Logical assignment operators(&&=, ||=, ??=)

// Numeric separator: S·ª≠ d·ª•ng d·∫•u ngƒÉn c√°ch s·ªë cho d·ªÖ nh√¨n. Th∆∞ vi·ªán underscore tr∆∞·ªõc c√≥ cung c·∫•p
console.log(1_000_000_000); // 1000000000
console.log(1000.12_34); // 1000.1234

// WeakRef
// WeakMap v√† WeakSet kh√°c Map v√† Set ·ªü ch·ªó key c·ªßa n√≥ ph·∫£i l√† 1 object. Trong JS th√¨ GC s·∫Ω k x√≥a object kh·ªèi b·ªô nh·ªõ n·∫øu tham chi·∫øu c·ªßa n√≥ v·∫´n t·ªìn t·∫°i v√† c√≥ th·ªÉ truy c·∫≠p ƒë∆∞·ª£c, g√¢y l√£ng ph√≠. VD: N·∫øu c√≥ Map c·∫∑p key value ƒë√≤i h·ªèi nhi·ªÅu b·ªô nh·ªõ v√† c·∫ßn gi·∫£i ph√≥ng c√†ng s·ªõm c√†ng t·ªët th√¨ n√™n d√πng WeakMap. N·∫øu d√πng object l√†m key cho WeakMap s·∫Ω k c·∫£n n√≥ b·ªã x√≥a b·ªüi GC v√¨ n√≥ ch·ªâ t·∫°o weak reference. Thg d√πng Symbol l√†m key cho WeakMap
// C√≤n WeakRef c√≥ ch·ª©c nƒÉng t∆∞∆°ng t·ª± s·∫Ω t·∫°o weak reference t·ªõi object kh√°c: 
const callback = () => {
  const aBigObj = new WeakRef({
    name: "Anonystick.com"
  });
  console.log(aBigObj.deref().name); // G·ªçi deref ƒë·ªÉ return ra object g·ªëc v√† g·ªçi GC, sau khi b·ªã claim s·∫Ω undefined
}
(async function(){
  await new Promise((resolve) => {
    setTimeout(() => {
      callback(); //Print "Anonystick.com"
      resolve();
    }, 2000);
  });
  await new Promise((resolve) => {
    setTimeout(() => {
      callback(); // Ch∆∞a ch·∫Øc "Anonystick.com" is printed. N·∫øu GC ƒë√£ collect
      resolve();
    }, 5000);
  });
})();

// *ES2022
// await Promise.resolve(console.log("üéâ")); => Promise d√πng ƒë∆∞·ª£c ·ªü toplevel m√† k c·∫ßn trong h√†m async => ch·ªâ d√πng ·ªü frontend ch·∫°y trong browser

// private v√† class
// K c·∫ßn kh·ªüi t·∫°o thu·ªôc t√≠nh trong h√†m t·∫°o m√† vi·∫øt ngay ngo√†i class
// Th√™m # ƒë·ªÉ c√≥ bi·∫øn private. C√≤n protected th√¨ th√™m prefix _
// D√πng [] ƒë·ªÉ l·∫•y gi√° tr·ªã l√† t√™n bi·∫øn
const a = 'anony';
const b = 'stick';
class Anonystick {
  name = 'Tips javascript';
  #age = 37;
  static isBlog = true;

  static [a + b] = 'Tips javascript';
  [b + a] = 'wow kakakak'
}
new Anonystick().age;
Anonystick.anonystick;
new Anonystick().stickanon

// RegExp Match Indices => √≠t d√πng
function displayError(text, message) {
  const re = /\b(continue|function|break|for|if)\b/d;
  const match = text.match(re);
  // H√†m indices tr·∫£ ra position start v√† end c·ªßa t·ª´ t√¨m ƒë∆∞·ª£c
  const [start, end] = match.indices[1];
  const error = ' '.repeat(start) + // Adjust the caret position.
    '^' +
    '-'.repeat(end - start - 1) +   // Append the underline.
    ' ' + message;                  // Append the message.
  console.log(text);
  console.log(error);
}
const code = 'const function = foo;'; // faulty code
displayError(code, 'Invalid variable name');

// *ES2023

// Trong browser, sort reverse splice ƒë·ªïi tr·ª±c ti·∫øp tr√™n array c≈©. D√πng toSorted toReversed toSpliced gi·∫£i quy·∫øt.
// VD: d√πng toSorted
// const array = [3, 2, 1];
// const sortedArray = array.toSorted();
// console.log(sortedArray); // [1, 2, 3]
// console.log(array); // [3, 2, 1]

// VD: D√πng with th√™m v√†o v·ªã tr√≠ n√†o gi√° tr·ªã n√†o
// const array = [1, 2, 2, 4];
// const withThree = array.with(2, 3);
// console.log(array); // [ 1, 2, 2, 4 ]
// console.log(withThree); // [ 1, 2, 3, 4 ]


// # Class trong JS
// ES5: t·ª´ kh√≥a class ch∆∞a t·ªìn t·∫°i khi·∫øn cho JS k d√πng ƒë∆∞·ª£c cho OOP chu·∫©n
function City(name, x, y) {
  this.name = name;
  this.setLocation(x, y);
}
City.prototype.setLocation = function(x, y) {
  this.x = x;
  this.y = y;
};
City.prototype.getLocation = function() {
  return {
    x: this.x,
    y: this.y
  };
};
const _city = new City('H·ªì Ch√≠ Minh', 100, 200);
console.log(_city.getLocation());
// ES6: t·ª´ kh√≥a class tr·ªü th√†nh chu·∫©n, kbh d√πng function l√† class nh∆∞ tr√™n n·ªØa

// Trong JS, bi·∫øn c√≥ c√°c t√≠nh ch·∫•t nh∆∞ C++. Nh∆∞ng ta th∆∞·ªùng mu·ªën c√≥ t√≠nh ch·∫•t immutable, t·ª©c ƒë·ªïi array tr·∫£ ra 1 array m·ªõi m√† k ·∫£nh h∆∞·ªüng t·ªõi array c≈© ch·∫≥ng h·∫°n. C√≥ nhi·ªÅu c√°ch ƒë·∫°t ƒë∆∞·ª£c ƒëi·ªÅu n√†y:
// Ng√†y x∆∞a th√¨ th·ªß c√¥ng vi·ªác copy array r·ªìi thao t√°c v·ªõi b·∫£n ƒë√£ copy k ·∫£nh h∆∞·ªüng b·∫£n g·ªëc. Nh∆∞ng performance th·∫•p, VD ta ƒë√£ duy·ªát 1 l·∫ßn ƒë·ªÉ copy, sau ƒë√≥ thao t√°c c√≥ th·ªÉ duy·ªát th√™m v√†i l·∫ßn n·ªØa s·∫Ω ch·∫≠m
const people = [1,2,3];
const copiedPeople = [...people];

// JS cung ra c√°c h√†m gi√∫p gi·ªØ t√≠nh immutable tr·ª±c ti·∫øp
const people2 = people.with(2, 4).toSorted().toReversed().toSpliced(0, 1, 10);
console.log(people2);

// Node phi√™n b·∫£n c√†ng cao c√†ng h·ªó tr·ª£ js version l·ªõn h∆°n v√† t∆∞∆°ng th√≠ch browser m·ªõi. Do ƒë√≥ d√πng js v√† nodejs b·∫£n th·∫•p s·∫Ω ƒë·∫£m b·∫£o t∆∞∆°ng th√≠ch h·∫øt.
// JS ra t·ª´ kh√≥a using ƒë·ªÉ t·ª± clean up gi√° tr·ªã khi ra kh·ªèi scope gi·ªëng C# nh∆∞ng ch·ªâ c√≥ ·ªü phi√™n b·∫£n m·ªõi nh·∫•t

// Thay cho array.includes
console.log(1 in people);

// JS l√∫c tr∆∞·ªõc k c√≥ ph∆∞∆°ng th·ª©c l·∫•y ph·∫ßn t·ª≠ cu·ªëi c√πng c·ªßa array, bh d√πng at()
const arr = [1,2,3];
console.log(arr.at(-1), arr.at(-2));

// V·∫•n ƒë·ªÅ copy object v√† array
// ... ch·ªâ gi√∫p shallow copy. ƒê·ªïi tr·ª±c ti·∫øp th√¨ k ·∫£nh h∆∞·ªüng nh∆∞ng ƒë·ªïi reference nested th√¨ ·∫£nh h∆∞·ªüng => Ch√∫ √Ω ƒë√¢y l√† l·ªói r·∫•t d·ªÖ nh·∫ßm t∆∞·ªüng l√† copy ƒë∆∞·ª£c
const bientruoc = {name: "a", test: { name: "a" }};
const biensau = { ...bientruoc };
biensau.name = "b";
biensau.test.name = "b";
console.log(bientruoc); // {name: "a", test: { name: "b" }};

const biensau2 = structuredClone(bientruoc);
biensau2.test.name = "c";
console.log(bientruoc); // k ƒë·ªïi

// T·ªëi ∆∞u
var list1 = ["a", "b"]; var list2 = ["c", "d"];
console.log(list1.concat(list2)); // M·∫£ng l·ªõn c√≥ hi·ªáu su·∫•t k√©m v√¨ sex t·∫°o m·∫£ng m·ªõi
console.log(list1.push.apply(list1, list2));  // T·ªët h∆°n v√¨ k tao m·∫£ng m·ªõi m√† apply v√≤a list1 lu√¥n

~~(1.2) // Thay th·∫ø Math.floor

URL.canParse("https://www.facebook.com"); // H√†m m·ªõi check valid url


